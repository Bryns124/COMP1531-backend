============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.5, py-1.10.0, pluggy-1.0.0 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/tmp_amd/kamen/export/kamen/3/cs1531/project-automarking/tempstore/.hypothesis/examples')
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/project-automarking/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collecting ... collected 71 items

tests/auth_tests/auth_login_test.py::test_successful_login PASSED        [  1%]
tests/auth_tests/auth_login_test.py::test_unregistered_user PASSED       [  2%]
tests/auth_tests/auth_login_test.py::test_registered_but_incorrect_password PASSED [  4%]
tests/auth_tests/auth_register_test.py::test_invalid_email[@gmail.com] PASSED [  5%]
tests/auth_tests/auth_register_test.py::test_invalid_email[bob] PASSED   [  7%]
tests/auth_tests/auth_register_test.py::test_invalid_email[bob@bob@bob.com] PASSED [  8%]
tests/auth_tests/auth_register_test.py::test_invalid_password[12345] PASSED [  9%]
tests/auth_tests/auth_register_test.py::test_invalid_password[] PASSED   [ 11%]
tests/auth_tests/auth_register_test.py::test_invalid_name_first[] PASSED [ 12%]
tests/auth_tests/auth_register_test.py::test_invalid_name_first[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [ 14%]
tests/auth_tests/auth_register_test.py::test_invalid_name_last[] PASSED  [ 15%]
tests/auth_tests/auth_register_test.py::test_invalid_name_last[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] PASSED [ 16%]
tests/auth_tests/auth_register_test.py::test_duplicate_email PASSED      [ 18%]
tests/auth_tests/auth_register_test.py::test_auth_register_pass_normal PASSED [ 19%]
tests/auth_tests/auth_register_test.py::test_auth_register_pass_password_short PASSED [ 21%]
tests/auth_tests/auth_register_test.py::test_auth_register_pass_password_long PASSED [ 22%]
tests/auth_tests/auth_register_test.py::test_auth_register_pass_names_short PASSED [ 23%]
tests/auth_tests/auth_register_test.py::test_auth_register_pass_names_long PASSED [ 25%]
tests/auth_tests/auth_register_test.py::test_auth_register_pass_double_same_password PASSED [ 26%]
tests/auth_tests/auth_register_test.py::test_auth_register_pass_double_same_name PASSED [ 28%]
tests/channel_tests/channel_details_test.py::test_channel_owner_can_get_details FAILED [ 29%]
tests/channel_tests/channel_details_test.py::test_channel_member_can_get_details FAILED [ 30%]
tests/channel_tests/channel_details_test.py::test_handles_generated_correctly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] PASSED [ 32%]
tests/channel_tests/channel_details_test.py::test_handles_generated_correctly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] PASSED [ 33%]
tests/channel_tests/channel_details_test.py::test_handles_generated_correctly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] FAILED [ 35%]
tests/channel_tests/channel_details_test.py::test_handles_generated_correctly[abc-def0-abcdef0-abc-def-abcdef1] FAILED [ 36%]
tests/channel_tests/channel_details_test.py::test_non_channel_member_cant_get_details PASSED [ 38%]
tests/channel_tests/channel_details_test.py::test_invalid_channel_id PASSED [ 39%]
tests/channel_tests/channel_details_test.py::test_invalid_token FAILED   [ 40%]
tests/channel_tests/channel_invite_test.py::test_error_when_already_member PASSED [ 42%]
tests/channel_tests/channel_invite_test.py::test_inviting_global_owner PASSED [ 43%]
tests/channel_tests/channel_invite_test.py::test_inviting_global_member PASSED [ 45%]
tests/channel_tests/channel_invite_test.py::test_invitation_from_non_channel_member PASSED [ 46%]
tests/channel_tests/channel_invite_test.py::test_channel_id_invalid PASSED [ 47%]
tests/channel_tests/channel_invite_test.py::test_u_id_invalid PASSED     [ 49%]
tests/channel_tests/channel_invite_test.py::test_invalid_token FAILED    [ 50%]
tests/channel_tests/channel_join_test.py::test_global_owner_can_join_private_channel FAILED [ 52%]
tests/channel_tests/channel_join_test.py::test_global_owner_can_join_public_channel PASSED [ 53%]
tests/channel_tests/channel_join_test.py::test_global_member_can_join_public_channel PASSED [ 54%]
tests/channel_tests/channel_join_test.py::test_global_member_cant_join_private_channel PASSED [ 56%]
tests/channel_tests/channel_join_test.py::test_already_joined_channel PASSED [ 57%]
tests/channel_tests/channel_join_test.py::test_join_invalid_channel_id PASSED [ 59%]
tests/channel_tests/channel_join_test.py::test_invalid_token FAILED      [ 60%]
tests/channel_tests/channel_messages_test.py::test_successful_no_messages PASSED [ 61%]
tests/channel_tests/channel_messages_test.py::test_input_error_when_start_greater_than_message_num PASSED [ 63%]
tests/channel_tests/channel_messages_test.py::test_access_error_when_user_is_non_member PASSED [ 64%]
tests/channel_tests/channel_messages_test.py::test_input_error_when_channel_id_invalid PASSED [ 66%]
tests/channel_tests/channel_messages_test.py::test_access_error_when_invalid_token_given FAILED [ 67%]
tests/channels_tests/channels_create_test.py::test_create_channel_successful[True-andys room] FAILED [ 69%]
tests/channels_tests/channels_create_test.py::test_create_channel_successful[False-andys room] FAILED [ 70%]
tests/channels_tests/channels_create_test.py::test_channel_invalid_name_length[True-] PASSED [ 71%]
tests/channels_tests/channels_create_test.py::test_channel_invalid_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 73%]
tests/channels_tests/channels_create_test.py::test_channel_invalid_name_length[False-] PASSED [ 74%]
tests/channels_tests/channels_create_test.py::test_channel_invalid_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 76%]
tests/channels_tests/channels_create_test.py::test_invalid_token FAILED  [ 77%]
tests/channels_tests/channels_list_test.py::test_when_member_is_in_no_channels PASSED [ 78%]
tests/channels_tests/channels_list_test.py::test_channel_owner_in_channel[True-andy] FAILED [ 80%]
tests/channels_tests/channels_list_test.py::test_channel_owner_in_channel[False-andy] FAILED [ 81%]
tests/channels_tests/channels_list_test.py::test_channel_member_in_channel[True-andy] FAILED [ 83%]
tests/channels_tests/channels_list_test.py::test_channel_member_in_channel[False-andy] FAILED [ 84%]
tests/channels_tests/channels_list_test.py::test_user_in_multiple_channels[False-True-ZERG-andy] FAILED [ 85%]
tests/channels_tests/channels_list_test.py::test_user_in_multiple_channels[False-False-ZERG-andy] FAILED [ 87%]
tests/channels_tests/channels_list_test.py::test_user_in_multiple_channels[True-True-ZERG-andy] FAILED [ 88%]
tests/channels_tests/channels_list_test.py::test_user_in_multiple_channels[True-False-ZERG-andy] FAILED [ 90%]
tests/channels_tests/channels_list_test.py::test_invalid_token FAILED    [ 91%]
tests/channels_tests/channels_listall_test.py::test_when_no_channels PASSED [ 92%]
tests/channels_tests/channels_listall_test.py::test_when_one_channel_exists_private PASSED [ 94%]
tests/channels_tests/channels_listall_test.py::test_when_one_channel_exists_public PASSED [ 95%]
tests/channels_tests/channels_listall_test.py::test_when_multiple_channels_exist PASSED [ 97%]
tests/channels_tests/channels_listall_test.py::test_invalid_token FAILED [ 98%]
tests/other_tests/clear_test.py::test_cant_login_after_clear PASSED      [100%]

====== Marks recorded: 24.47 ======


=================================== FAILURES ===================================
______________________ test_channel_owner_can_get_details ______________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=1)

    def test_channel_owner_can_get_details(woodys_public_toybox, user_woody):
        ch_deets = channel_details_v1(user_woody.token, woodys_public_toybox.channel_id)
    
>       assert ch_deets['name'] == woodys_public_toybox.name
E       KeyError: 'name'

tests/channel_tests/channel_details_test.py:25: KeyError
_____________________ test_channel_member_can_get_details ______________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=1)
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, token=2)

    def test_channel_member_can_get_details(woodys_public_toybox, user_woody, user_buzz):
        channel_join_v1(user_buzz.token, woodys_public_toybox.channel_id)
        ch_deets = channel_details_v1(user_buzz.token, woodys_public_toybox.channel_id)
    
>       assert ch_deets['name'] == woodys_public_toybox.name
E       KeyError: 'name'

tests/channel_tests/channel_details_test.py:36: KeyError
_ test_handles_generated_correctly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] _

first1 = '@bcdefgh!j', last1 = 'klmn opqrst', handle1 = 'bcdefghjklmnopqrst'
first2 = 'bcdefghj', last2 = 'klmnopqrst', handle2 = 'bcdefghjklmnopqrst0'
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=1)

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def test_handles_generated_correctly(first1, last1, handle1, first2, last2, handle2, woodys_public_toybox, user_woody):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        auth_register_v1('blah3@email.com', 'password1', 'abc', 'def')
    
        u_id1 = auth_register_v1(email1, 'password1', first1, last1)['auth_user_id']
        channel_join_v1(u_id1, woodys_public_toybox.channel_id)
    
        u_id2 = auth_register_v1(email2, 'password1', first2, last2)['auth_user_id']
        channel_join_v1(u_id2, woodys_public_toybox.channel_id)
    
        ch_deets = channel_details_v1(user_woody.token, woodys_public_toybox.channel_id)
    
        for k in ch_deets['all_members']:
            if k['u_id'] == u_id1:
                assert k['email'] == email1
                assert k['name_first'] == first1
                assert k['name_last'] == last1
>               assert k['handle_str'] == handle1
E               AssertionError: assert '@bcdefgh!jklmn opqrs' == 'bcdefghjklmnopqrst'
E                 - bcdefghjklmnopqrst
E                 ?                  -
E                 + @bcdefgh!jklmn opqrs
E                 ? +       +     +

tests/channel_tests/channel_details_test.py:71: AssertionError
______ test_handles_generated_correctly[abc-def0-abcdef0-abc-def-abcdef1] ______

first1 = 'abc', last1 = 'def0', handle1 = 'abcdef0', first2 = 'abc'
last2 = 'def', handle2 = 'abcdef1'
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=1)

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def test_handles_generated_correctly(first1, last1, handle1, first2, last2, handle2, woodys_public_toybox, user_woody):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        auth_register_v1('blah3@email.com', 'password1', 'abc', 'def')
    
        u_id1 = auth_register_v1(email1, 'password1', first1, last1)['auth_user_id']
        channel_join_v1(u_id1, woodys_public_toybox.channel_id)
    
        u_id2 = auth_register_v1(email2, 'password1', first2, last2)['auth_user_id']
        channel_join_v1(u_id2, woodys_public_toybox.channel_id)
    
        ch_deets = channel_details_v1(user_woody.token, woodys_public_toybox.channel_id)
    
        for k in ch_deets['all_members']:
            if k['u_id'] == u_id1:
                assert k['email'] == email1
                assert k['name_first'] == first1
                assert k['name_last'] == last1
                assert k['handle_str'] == handle1
            if k['u_id'] == u_id2:
                assert k['email'] == email2
                assert k['name_first'] == first2
                assert k['name_last'] == last2
>               assert k['handle_str'] == handle2
E               AssertionError: assert 'abcdef01' == 'abcdef1'
E                 - abcdef1
E                 + abcdef01
E                 ?       +

tests/channel_tests/channel_details_test.py:76: AssertionError
______________________________ test_invalid_token ______________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])

    def test_invalid_token(woodys_public_toybox):
        with pytest.raises(err.AccessError):
>           channel_details_v1(-1, woodys_public_toybox.channel_id)

tests/channel_tests/channel_details_test.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

auth_user_id = -1, channel_id = 1

    def channel_details_v1(auth_user_id, channel_id):
    
        '''
        channel_details_v1(auth_user_id, channel_id)
    
        Given a channel with ID channel_id that the authorised user is a member of, provide basic details about the channel.
    
        returns a dictionary
        {
            "channel_name": name of the channel (string),
            "is_public": whether or not the channel is public (boolean),
            "owner_members": a list of dictionaries containing owner users, each dictionary being of the form:
            {
            "u_id": user id (string),
            "email": email (string),
            "name_first": first name (string),
            "name_last": last name (string),
            "handle_str": user handle (string)
            }
            "all_members": a list of dictionaries in the same format as owner_members, however containing information
            on all members of the channel
        }
        '''
    
        store = data_store.get() # Accessing data_store for data
    
        is_channel = False # Initialising booleans for raising errors
        is_member = False
        is_valid_u_id = False
    
        all_channels = store['channels'] # Saving list of channels as a local variable
    
        # Iterates over all users and checks if the provided user id is in the system
        for user in store['users']:
            if user['u_id'] == auth_user_id:
                is_valid_u_id = True # if the user id is found the boolean for valid user is set to True
    
        # if the user id is not in the system, raises an InputError
        if not is_valid_u_id:
>           raise InputError("Invalid User ID")
E           src.error.InputError: Invalid User ID

src/channel.py:113: InputError
______________________________ test_invalid_token ______________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, token=2)

    def test_invalid_token(woodys_public_toybox, user_buzz):
        with pytest.raises(err.AccessError):
>           channel_invite_v1(-1, woodys_public_toybox.channel_id, user_buzz.u_id)

tests/channel_tests/channel_invite_test.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

auth_user_id = -1, channel_id = 1, u_id = 2

    def channel_invite_v1(auth_user_id, channel_id, u_id):
        """
        Allows a authorized user to invite another user to a channel they are apart of.
    
        Args:
            auth_user_id (u_id): A valid user who is apart of the channel/
            channel_id (channel_id): The channel id auth_user is inviting to.
            u_id (u_id): A valid second user who is being invited
    
        Raises:
            InputError: u_id dos not exist in datastore.
            InputError: channel_id does not exist in datastore.
            InputError: the invited user is already part of the channel.
            AccessError: the auth_user is not in the channel they are inviting to.
    
        Returns:
            dictionary: nothing! nothing is returned after a invite
        """
        store = data_store.get()
    
        auth_user_exist = False
        user_exist = False
    
        for user in store['users']:
            if auth_user_id == user['u_id']:
                auth_user_exist = True
            elif u_id == user['u_id']:
                user_exist = True
    
        if auth_user_exist == False or user_exist == False:
>           raise InputError
E           src.error.InputError

src/channel.py:35: InputError
__________________ test_global_owner_can_join_private_channel __________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=1)
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[2], all_members=[])

    def test_global_owner_can_join_private_channel(user_woody, zergs_private_lair):
>       channel_join_v1(user_woody.token, zergs_private_lair.channel_id)

tests/channel_tests/channel_join_test.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

auth_user_id = 1, channel_id = 1

    def channel_join_v1(auth_user_id, channel_id):
        '''
        function allows user to join another channel based on the channel ID
        will give input error if the channel id is invalid or if the user is already in the channel
        will give access error if the channel ID is one for a private channel
        '''
        store = data_store.get()
    
        auth_user_exist = False
    
        for user in store['users']:
            if auth_user_id == user['u_id']:
                auth_user_exist = True
    
        if auth_user_exist == False:
            raise InputError
    
        if channel_validity(channel_id, store) == False:
            raise InputError("Channel id is invalid.")
    
        if already_member(auth_user_id, channel_id, store) == True:
            raise InputError("The user is already a member of this channel.")
    
        current_channel = extract_channel_details(channel_id, store)
        if current_channel['is_public'] == False:
>           raise AccessError("This is a private channel, user does not have access.")
E           src.error.AccessError: This is a private channel, user does not have access.

src/channel.py:298: AccessError
______________________________ test_invalid_token ______________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])

    def test_invalid_token(woodys_public_toybox):
        with pytest.raises(err.AccessError):
>           channel_join_v1(-1, woodys_public_toybox.channel_id)

tests/channel_tests/channel_join_test.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

auth_user_id = -1, channel_id = 1

    def channel_join_v1(auth_user_id, channel_id):
        '''
        function allows user to join another channel based on the channel ID
        will give input error if the channel id is invalid or if the user is already in the channel
        will give access error if the channel ID is one for a private channel
        '''
        store = data_store.get()
    
        auth_user_exist = False
    
        for user in store['users']:
            if auth_user_id == user['u_id']:
                auth_user_exist = True
    
        if auth_user_exist == False:
>           raise InputError
E           src.error.InputError

src/channel.py:288: InputError
__________________ test_access_error_when_invalid_token_given __________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])

    def test_access_error_when_invalid_token_given(woodys_public_toybox):
        with pytest.raises(err.AccessError):
>           channel_messages_v1(-1, woodys_public_toybox.channel_id, 0)

tests/channel_tests/channel_messages_test.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

auth_user_id = -1, channel_id = 1, start = 0

    def channel_messages_v1(auth_user_id, channel_id, start):
        """_summary_
        Taking a valid user it pulls a list of up to 50 messages from a starting point and returns them.
        Args:
            auth_user_id (_u_id): The valid id of the user calling the messages.
            channel_id (channel_id): The channel_id of the channel which to call the messages from.
            start (int): A starting index value.
    
        Raises:
            InputError: u_id does not exist in data store.
            InputError: channel_id does not exist in data store.
            InputError: the starting index is greater than the messages in the channel.
            AccessError: u_id does not have access to the channel
    
        Returns:
            _type_: _description_
        """
        store = data_store.get()
    
        # print(store)
    
        auth_user_exist = False
    
        for user in store['users']:
            if auth_user_id == user['u_id']:
                auth_user_exist = True
    
        if auth_user_exist == False:
>           raise InputError
E           src.error.InputError

src/channel.py:222: InputError
_______________ test_create_channel_successful[True-andys room] ________________

name = 'andys room', is_public = True
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=1)
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=2)

    @pytest.mark.parametrize('name', ['andys room'])
    @pytest.mark.parametrize('is_public', [True, False])
    def test_create_channel_successful(name, is_public, user_zerg, user_woody):
        ch_id = channels_create_v1(user_zerg.token, name, is_public)['channel_id']
        deets = channel_details_v1(user_zerg.token, ch_id)
    
>       assert deets['name'] == name
E       KeyError: 'name'

tests/channels_tests/channels_create_test.py:28: KeyError
_______________ test_create_channel_successful[False-andys room] _______________

name = 'andys room', is_public = False
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=1)
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=2)

    @pytest.mark.parametrize('name', ['andys room'])
    @pytest.mark.parametrize('is_public', [True, False])
    def test_create_channel_successful(name, is_public, user_zerg, user_woody):
        ch_id = channels_create_v1(user_zerg.token, name, is_public)['channel_id']
        deets = channel_details_v1(user_zerg.token, ch_id)
    
>       assert deets['name'] == name
E       KeyError: 'name'

tests/channels_tests/channels_create_test.py:28: KeyError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=1)

    def test_invalid_token(user_woody):
        with pytest.raises(err.AccessError):
>           channels_create_v1(-1, 'literally anything', True)

tests/channels_tests/channels_create_test.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

auth_user_id = -1, name = 'literally anything', is_public = True

    def channels_create_v1(auth_user_id, name, is_public):
    
        store = data_store.get()
    
        auth_user_exist = False
    
        for user in store['users']:
            if auth_user_id == user['u_id']:
                auth_user_exist = True
    
        if auth_user_exist == False:
>           raise InputError
E           src.error.InputError

src/channels.py:97: InputError
___________________ test_channel_owner_in_channel[True-andy] ___________________

name = 'andy', is_public = True
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=1)

    @pytest.mark.parametrize('name', ['andy'])
    @pytest.mark.parametrize('is_public', [True, False])
    def test_channel_owner_in_channel(name, is_public, user_woody):
        ch = channels_create_v1(user_woody.token, name, is_public)['channel_id']
    
        deets = {'channel_id': ch, 'name': name}
    
>       assert deets in channels_list_v1(user_woody.token)['channels']
E       AssertionError: assert {'channel_id': 1, 'name': 'andy'} in [{'channel_id': 1, 'channel_name': 'andy'}]

tests/channels_tests/channels_list_test.py:32: AssertionError
__________________ test_channel_owner_in_channel[False-andy] ___________________

name = 'andy', is_public = False
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=1)

    @pytest.mark.parametrize('name', ['andy'])
    @pytest.mark.parametrize('is_public', [True, False])
    def test_channel_owner_in_channel(name, is_public, user_woody):
        ch = channels_create_v1(user_woody.token, name, is_public)['channel_id']
    
        deets = {'channel_id': ch, 'name': name}
    
>       assert deets in channels_list_v1(user_woody.token)['channels']
E       AssertionError: assert {'channel_id': 1, 'name': 'andy'} in [{'channel_id': 1, 'channel_name': 'andy'}]

tests/channels_tests/channels_list_test.py:32: AssertionError
__________________ test_channel_member_in_channel[True-andy] ___________________

name = 'andy', is_public = True
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=1)
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=2)

    @pytest.mark.parametrize('name', ['andy'])
    @pytest.mark.parametrize('is_public', [True, False])
    def test_channel_member_in_channel(name, is_public, user_woody, user_zerg):
        ch = channels_create_v1(user_woody.token, name, is_public)['channel_id']
    
        channel_invite_v1(user_woody.token, ch, user_zerg.u_id)
    
        channel_detail = {'channel_id': ch, 'name': name}
    
>       assert channel_detail in channels_list_v1(user_zerg.token)['channels']
E       AssertionError: assert {'channel_id': 1, 'name': 'andy'} in [{'channel_id': 1, 'channel_name': 'andy'}]

tests/channels_tests/channels_list_test.py:44: AssertionError
__________________ test_channel_member_in_channel[False-andy] __________________

name = 'andy', is_public = False
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=1)
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=2)

    @pytest.mark.parametrize('name', ['andy'])
    @pytest.mark.parametrize('is_public', [True, False])
    def test_channel_member_in_channel(name, is_public, user_woody, user_zerg):
        ch = channels_create_v1(user_woody.token, name, is_public)['channel_id']
    
        channel_invite_v1(user_woody.token, ch, user_zerg.u_id)
    
        channel_detail = {'channel_id': ch, 'name': name}
    
>       assert channel_detail in channels_list_v1(user_zerg.token)['channels']
E       AssertionError: assert {'channel_id': 1, 'name': 'andy'} in [{'channel_id': 1, 'channel_name': 'andy'}]

tests/channels_tests/channels_list_test.py:44: AssertionError
_____________ test_user_in_multiple_channels[False-True-ZERG-andy] _____________

name1 = 'andy', name2 = 'ZERG', is_public1 = True, is_public2 = False
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=1)

    @pytest.mark.parametrize('name1', ['andy'])
    @pytest.mark.parametrize('name2', ['ZERG'])
    @pytest.mark.parametrize('is_public1', [True, False])
    @pytest.mark.parametrize('is_public2', [False, True])
    def test_user_in_multiple_channels(name1, name2, is_public1, is_public2, user_woody):
        ch_1 = channels_create_v1(user_woody.token, name1, is_public1)['channel_id']
        ch_2 = channels_create_v1(user_woody.token, name2, is_public2)['channel_id']
    
        expected_joined = [{'channel_id': ch_1, 'name': name1}, {'channel_id': ch_2, 'name': name2}]
        joined = channels_list_v1(user_woody.token)['channels']
    
>       assert sorted(expected_joined, key=lambda d: d['channel_id']) == sorted(joined, key=lambda d: d['channel_id'])
E       AssertionError: assert [{'channel_id': 1, 'name': 'andy'}, {'channel_id': 2, 'name': 'ZERG'}] == [{'channel_id': 1, 'channel_name': 'andy'},\n {'channel_id': 2, 'channel_name': 'ZERG'}]
E         At index 0 diff: {'channel_id': 1, 'name': 'andy'} != {'channel_id': 1, 'channel_name': 'andy'}
E         Full diff:
E           [
E            {'channel_id': 1,
E         -   'channel_name': 'andy'},
E         ?    --------
E         +   'name': 'andy'},
E            {'channel_id': 2,
E         -   'channel_name': 'ZERG'},
E         ?    --------
E         +   'name': 'ZERG'},
E           ]

tests/channels_tests/channels_list_test.py:58: AssertionError
____________ test_user_in_multiple_channels[False-False-ZERG-andy] _____________

name1 = 'andy', name2 = 'ZERG', is_public1 = False, is_public2 = False
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=1)

    @pytest.mark.parametrize('name1', ['andy'])
    @pytest.mark.parametrize('name2', ['ZERG'])
    @pytest.mark.parametrize('is_public1', [True, False])
    @pytest.mark.parametrize('is_public2', [False, True])
    def test_user_in_multiple_channels(name1, name2, is_public1, is_public2, user_woody):
        ch_1 = channels_create_v1(user_woody.token, name1, is_public1)['channel_id']
        ch_2 = channels_create_v1(user_woody.token, name2, is_public2)['channel_id']
    
        expected_joined = [{'channel_id': ch_1, 'name': name1}, {'channel_id': ch_2, 'name': name2}]
        joined = channels_list_v1(user_woody.token)['channels']
    
>       assert sorted(expected_joined, key=lambda d: d['channel_id']) == sorted(joined, key=lambda d: d['channel_id'])
E       AssertionError: assert [{'channel_id': 1, 'name': 'andy'}, {'channel_id': 2, 'name': 'ZERG'}] == [{'channel_id': 1, 'channel_name': 'andy'},\n {'channel_id': 2, 'channel_name': 'ZERG'}]
E         At index 0 diff: {'channel_id': 1, 'name': 'andy'} != {'channel_id': 1, 'channel_name': 'andy'}
E         Full diff:
E           [
E            {'channel_id': 1,
E         -   'channel_name': 'andy'},
E         ?    --------
E         +   'name': 'andy'},
E            {'channel_id': 2,
E         -   'channel_name': 'ZERG'},
E         ?    --------
E         +   'name': 'ZERG'},
E           ]

tests/channels_tests/channels_list_test.py:58: AssertionError
_____________ test_user_in_multiple_channels[True-True-ZERG-andy] ______________

name1 = 'andy', name2 = 'ZERG', is_public1 = True, is_public2 = True
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=1)

    @pytest.mark.parametrize('name1', ['andy'])
    @pytest.mark.parametrize('name2', ['ZERG'])
    @pytest.mark.parametrize('is_public1', [True, False])
    @pytest.mark.parametrize('is_public2', [False, True])
    def test_user_in_multiple_channels(name1, name2, is_public1, is_public2, user_woody):
        ch_1 = channels_create_v1(user_woody.token, name1, is_public1)['channel_id']
        ch_2 = channels_create_v1(user_woody.token, name2, is_public2)['channel_id']
    
        expected_joined = [{'channel_id': ch_1, 'name': name1}, {'channel_id': ch_2, 'name': name2}]
        joined = channels_list_v1(user_woody.token)['channels']
    
>       assert sorted(expected_joined, key=lambda d: d['channel_id']) == sorted(joined, key=lambda d: d['channel_id'])
E       AssertionError: assert [{'channel_id': 1, 'name': 'andy'}, {'channel_id': 2, 'name': 'ZERG'}] == [{'channel_id': 1, 'channel_name': 'andy'},\n {'channel_id': 2, 'channel_name': 'ZERG'}]
E         At index 0 diff: {'channel_id': 1, 'name': 'andy'} != {'channel_id': 1, 'channel_name': 'andy'}
E         Full diff:
E           [
E            {'channel_id': 1,
E         -   'channel_name': 'andy'},
E         ?    --------
E         +   'name': 'andy'},
E            {'channel_id': 2,
E         -   'channel_name': 'ZERG'},
E         ?    --------
E         +   'name': 'ZERG'},
E           ]

tests/channels_tests/channels_list_test.py:58: AssertionError
_____________ test_user_in_multiple_channels[True-False-ZERG-andy] _____________

name1 = 'andy', name2 = 'ZERG', is_public1 = False, is_public2 = True
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=1)

    @pytest.mark.parametrize('name1', ['andy'])
    @pytest.mark.parametrize('name2', ['ZERG'])
    @pytest.mark.parametrize('is_public1', [True, False])
    @pytest.mark.parametrize('is_public2', [False, True])
    def test_user_in_multiple_channels(name1, name2, is_public1, is_public2, user_woody):
        ch_1 = channels_create_v1(user_woody.token, name1, is_public1)['channel_id']
        ch_2 = channels_create_v1(user_woody.token, name2, is_public2)['channel_id']
    
        expected_joined = [{'channel_id': ch_1, 'name': name1}, {'channel_id': ch_2, 'name': name2}]
        joined = channels_list_v1(user_woody.token)['channels']
    
>       assert sorted(expected_joined, key=lambda d: d['channel_id']) == sorted(joined, key=lambda d: d['channel_id'])
E       AssertionError: assert [{'channel_id': 1, 'name': 'andy'}, {'channel_id': 2, 'name': 'ZERG'}] == [{'channel_id': 1, 'channel_name': 'andy'},\n {'channel_id': 2, 'channel_name': 'ZERG'}]
E         At index 0 diff: {'channel_id': 1, 'name': 'andy'} != {'channel_id': 1, 'channel_name': 'andy'}
E         Full diff:
E           [
E            {'channel_id': 1,
E         -   'channel_name': 'andy'},
E         ?    --------
E         +   'name': 'andy'},
E            {'channel_id': 2,
E         -   'channel_name': 'ZERG'},
E         ?    --------
E         +   'name': 'ZERG'},
E           ]

tests/channels_tests/channels_list_test.py:58: AssertionError
______________________________ test_invalid_token ______________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])

    def test_invalid_token(woodys_public_toybox):
        with pytest.raises(err.AccessError):
>           channels_list_v1(-1)

tests/channels_tests/channels_list_test.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

auth_user_id = -1

    def channels_list_v1(auth_user_id):
        store = data_store.get()
    
        auth_user_exist = False
    
        for user in store['users']:
            if auth_user_id == user['u_id']:
                auth_user_exist = True
    
        if auth_user_exist == False:
>           raise InputError
E           src.error.InputError

src/channels.py:18: InputError
______________________________ test_invalid_token ______________________________

clear = None
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])

    def test_invalid_token(clear, woodys_public_toybox):
        with pytest.raises(err.AccessError):
>           channels_listall_v1(-1)

tests/channels_tests/channels_listall_test.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

auth_user_id = -1

    def channels_listall_v1(auth_user_id):
        '''
        list all the channels that has been created
    
        Assumption: no access error AKA auth_user_id is valid
        returns: dictionary with a list of dictionaries of channels
        '''
        store = data_store.get()
        store_channels = store['channels']
    
        auth_user_exist = False
    
        for user in store['users']:
            if auth_user_id == user['u_id']:
                auth_user_exist = True
    
        if auth_user_exist == False:
>           raise InputError
E           src.error.InputError

src/channels.py:67: InputError
=========================== short test summary info ============================
FAILED tests/channel_tests/channel_details_test.py::test_channel_owner_can_get_details
FAILED tests/channel_tests/channel_details_test.py::test_channel_member_can_get_details
FAILED tests/channel_tests/channel_details_test.py::test_handles_generated_correctly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0]
FAILED tests/channel_tests/channel_details_test.py::test_handles_generated_correctly[abc-def0-abcdef0-abc-def-abcdef1]
FAILED tests/channel_tests/channel_details_test.py::test_invalid_token - src....
FAILED tests/channel_tests/channel_invite_test.py::test_invalid_token - src.e...
FAILED tests/channel_tests/channel_join_test.py::test_global_owner_can_join_private_channel
FAILED tests/channel_tests/channel_join_test.py::test_invalid_token - src.err...
FAILED tests/channel_tests/channel_messages_test.py::test_access_error_when_invalid_token_given
FAILED tests/channels_tests/channels_create_test.py::test_create_channel_successful[True-andys room]
FAILED tests/channels_tests/channels_create_test.py::test_create_channel_successful[False-andys room]
FAILED tests/channels_tests/channels_create_test.py::test_invalid_token - src...
FAILED tests/channels_tests/channels_list_test.py::test_channel_owner_in_channel[True-andy]
FAILED tests/channels_tests/channels_list_test.py::test_channel_owner_in_channel[False-andy]
FAILED tests/channels_tests/channels_list_test.py::test_channel_member_in_channel[True-andy]
FAILED tests/channels_tests/channels_list_test.py::test_channel_member_in_channel[False-andy]
FAILED tests/channels_tests/channels_list_test.py::test_user_in_multiple_channels[False-True-ZERG-andy]
FAILED tests/channels_tests/channels_list_test.py::test_user_in_multiple_channels[False-False-ZERG-andy]
FAILED tests/channels_tests/channels_list_test.py::test_user_in_multiple_channels[True-True-ZERG-andy]
FAILED tests/channels_tests/channels_list_test.py::test_user_in_multiple_channels[True-False-ZERG-andy]
FAILED tests/channels_tests/channels_list_test.py::test_invalid_token - src.e...
FAILED tests/channels_tests/channels_listall_test.py::test_invalid_token - sr...
======================== 22 failed, 49 passed in 1.00s =========================
